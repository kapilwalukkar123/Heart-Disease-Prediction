#Heart Disease Prediction with Machine Learning(Random forest algorithm , SVM and logistic regression)


#Preparing the Tools
#!pip install sklearn
#Import all libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Inline matplotlib to view inside this notebook directly
%matplotlib inline


import warnings
warnings.filterwarnings('ignore')

#Models
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#Evaluation
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.metrics import roc_curve



# load data
df = pd.read_csv("/content/heart.csv")
df.shape


#exploratory data analysis
df.head()
df.tail()

#how many class of one feature or target
df["target"].value_counts()

#bar chart
df["target"].value_counts().plot(kind='bar', color=["salmon","lightblue"])

df.info()

#check missing values of all features
df.isna().sum()

df.describe()

#Heart Disease Frequency according to Sex
df.sex.value_counts()

#Compare target and sex column
pd.crosstab(df.target, df.sex)


#Create plot of crosstab
pd.crosstab(df.target, df.sex).plot(kind="bar",figsize=(10,6),color=["salmon","lightblue"])
plt.title("Heart Disease Frerquency for Sex")
plt.xlabel("0 = No Disease, 1=Disease")
plt.ylabel("Amount")
plt.legend(["Female","Male"]);
plt.xticks(rotation=0);

#Age vs. Max Heart Rate for Heart Disease
#Create new figure
plt.figure(figsize=(10,6))

#Scatter with positive examples
plt.scatter(df.age[df.target==1],
           df.thalach[df.target==1],
           c="salmon")

#Scatter with negative examples
plt.scatter(df.age[df.target==0],
           df.thalach[df.target==0],
           c="lightblue");

#Add some helpful info
plt.title("Heart Disease in function of Age and Max Heart Rate")
plt.xlabel("Age")
plt.ylabel("Max Heart Rate")
plt.legend(["Disease","No Disease"])

#Check the distribution of the age column with a histogram
#May check for outliers of the data
df.age.plot.hist()


#Heart Disease Frequency per Chest Pain Type
pd.crosstab(df.cp,df.target)
# Make corsstab visualise
pd.crosstab(df.cp,df.target).plot(kind="bar",figsize=(10,6),color=["salmon","lightblue"])

plt.title("Heart Disease Frequency Per Chest Pain Type")
plt.xlabel("CHest Pain Type")
plt.ylabel("Amount")
plt.legend(["No Disease","Disease"])
plt.xticks(rotation=0)

#Correlation
#Make a correlation matrix
df.corr()

#Visualise correlation
corr_matrix = df.corr()
fig,ax = plt.subplots(figsize=(15,10))
ax=sns.heatmap(corr_matrix,annot=True,linewidths=0.5,fmt=".2f",cmap="YlGnBu");
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top-0.5)

#Modelling
X=df.drop("target",axis=1)
y=df["target"]

#Split data into train and test sets
np.random.seed(42)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,stratify=y,random_state=2)


#Random Forest Model
rf = RandomForestClassifier(n_estimators=500, random_state=12, max_depth=5)
rf.fit(X_train.values,y_train)
rf_predicted = rf.predict(X_test)

rf_conf_matrix = confusion_matrix(y_test, rf_predicted)
print("confusion matrix")
print(rf_conf_matrix)

rf_acc_score = accuracy_score(y_test, rf_predicted)
print("Accuracy of Random Forest:",rf_acc_score*100)

#Bulding the Predictive system
print("******* Age of person *********")
a=int(input("Enter the age of person  :- "))
print("******* Gender of person *********")
print("1 = male")
print("0 = female")
b=int(input("Enter the sex of person  :- "))
print("******** Chest pain type ******")
print("0 = Typical angina: chest pain related decrease blood supply to the heart")
print("1 = Atypical angina: chest pain not related to heart")
print("2 = Non-anginal pain: typically esophageal spasms (non heart related)")
print("3 = Asymptomatic: chest pain not showing signs of disease")
c=int(input("Enter the chest pain type  :- "))
print("******* Resting blood pressure(mmHg) *********")
d=int(input(" Enter the Resting blood pressure in mm Hg  :- "))
print("******* Serum cholestoral in mg/dl *********")
e=int(input(" Enter the Serum cholestoral in mg/dl  :- "))
print("******* Fasting blood sugar *********")
print("1 = True")
print("0 = false")
f=int(input("Enter the Fasting blood sugar > 120 mg/dl :- "))
print("******* Resting electrocardiographic results *********")
print("0 = Nothing to note")
print("1 = ST-T Wave abnormality")
print("2 = Possible or definite left ventricular hypertrophy")
g=int(input("Enter the Resting electrocardiographic results :- "))
print("******* Maximum heart rate achieved *********")
h=int(input(" Enter the Maximum heart rate achieved  :- "))
print("******* Exercise induced angina  *********")
print("1 = Yes")
print("0 = No")
i=int(input("Enter the Exercise induced angina  :- "))
print("******* ST depression induced by exercise relative to rest looks at stress of heart during excercise(oldpeak) *********")
j=int(input(" oldpeak :- "))
print("*******  The slope of the peak exercise ST segment *********")
print("0 = Upsloping: better heart rate with excercise (uncommon)")
print("1 = Flatsloping: minimal change (typical healthy heart)")
print("2 = Downslopins: signs of unhealthy heart")
k=int(input("Enter the slope of the peak exercise ST segment :- "))
print("******* Number of major vessels *********")
l=int(input(" Enter number of major vessels (0-3) colored by flourosopy  :- "))
print("*******  Thalium stress result  *********")
print("1,3 = normal")
print("6 = fixed defect: used to be defect but ok now")
print("7 = reversable defect: no proper blood movement when excercising")
m=int(input("Enter the Thalium stress resul :- "))


input_data=(a,b,c,d,e,f,g,h,i,j,k,l,m)
#changing the input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the numpy array as we are predicting for only on instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)
predict=rf.predict(input_data_reshape)
print(predict)
if predict==[1]:
  print("The person is suffering from heart disease")
else:
  print("The person is not suffering from heart disease")



#logistic regression model
model=LogisticRegression()

# training the logRegression model with training data
model.fit(X_train.values,y_train)

#accuracy of the training data
x_train_prediction=model.predict(X_train)
X_train_accuracy_score=accuracy_score(x_train_prediction,y_train)
print("Accuracy on train data : ",X_train_accuracy_score)

#accuracy of the test data
x_test_prediction=model.predict(X_test)
X_test_accuracy_score=accuracy_score(x_test_prediction,y_test)
print("Accuracy on test data : ",X_test_accuracy_score)

#Bulding the Predictive system
input_data=(a,b,c,d,e,f,g,h,i,j,k,l,m)
#changing the input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the numpy array as we are predicting for only on instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)
predict=model.predict(input_data_reshape)
print(predict)
if predict==[1]:
  print("The person is suffering from heart disease")
else:
  print("The person is not suffering from heart disease")

#SVM
from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

y_pred = clf.predict(X_test

cm = confusion_matrix(y_test,y_pred)
print(cm)

svm=(accuracy_score(y_test,y_pred))
print(svm)

#Bulding the Predictive system
input_data=(a,b,c,d,e,f,g,h,i,j,k,l,m)
#changing the input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the numpy array as we are predicting for only on instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)
predict=clf.predict(input_data_reshape)
print(predict)
if predict==[1]:
  print("The person is suffering from heart disease")
else:
  print("The person is not suffering from heart disease")


data = {'Estimators':['Random Forest',
                      'Logistic Regression',
                      'Support Vector Machine'],
        "Accuracy":[rf_acc_score,X_train_accuracy_score,svm
                    ]
        }

data1 = pd.DataFrame(data)

data1.sort_values('Accuracy')
